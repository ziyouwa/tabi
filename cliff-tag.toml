# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\

{% macro commit(commit, in_breaking_section=false) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking and not in_breaking_section %}[**‼️BREAKING‼️**] {% endif %}\
        {{ commit.message | upper_first }} - ({{ commit.id | truncate(length=7, end="") }})\
{% endmacro -%}

{%- set breaking_header_shown = false -%}
{% for commit in commits -%}
    {% if commit.breaking and not breaking_header_shown -%}
        {% raw %}\n### 💥 BREAKING CHANGES 💥\n{% endraw %}
        {% set_global breaking_header_shown = true %}
    {%- endif -%}
    {%- if commit.breaking -%}
        {{ self::commit(commit=commit, in_breaking_section=true) -}}
    {% endif -%}
{%- endfor -%}
{%- if breaking_header_shown == true -%}
    {% raw %}\n{% endraw %}\
{%- endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}\
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""

# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Remove trailing whitespace.
    { pattern = ' +$', replace = "" },
    # Replace multiple spaces with a single space.
    { pattern = ' +', replace = " " },
    # Remove gitmoji, both actual UTF emoji and :emoji:
    { pattern = ' *(:\w+:|[\p{Emoji_Presentation}\p{Extended_Pictographic}\u{200D}]) *', replace = "" },
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->✨ Features" },
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
    { message = "^style", group = "<!-- 2 -->💄 Styling" },
    { message = "^perf", group = "<!-- 3 -->⚡️ Performance" },
    { message = "^doc", group = "<!-- 4 -->📝 Documentation" },
    { message = "^refactor", group = "<!-- 5 -->♻️ Refactor" },
    { message = "^revert", group = "<!-- 6 -->⏪️ Revert" },
    { message = "^deprecate", group = "<!-- 7 -->🗑️ Deprecations" },
    { message = "^test", group = "✅ Testing" },
    { message = "^chore", skip = true },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = true
# regex for matching git tags
tag_pattern = "v[0-9].*"

# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
# limit the number of commits included in the changelog.
# limit_commits = 42
